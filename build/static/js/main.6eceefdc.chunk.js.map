{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","file","name","bucket","uploadRef","React","createRef","handleClick","bind","transcribeFile","e","this","click","event","setState","target","files","loaded","hasFile","className","data","FormData","append","axios","post","headers","then","res","console","log","statusText","Button","variant","onClick","InputGroup","Prepend","Text","id","FormControl","placeholder","aria-label","aria-describedby","type","ref","r","style","display","onChange","onChangeFile","RenderFile","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAyHeA,E,kDAhHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,KACNC,KAAM,GACNC,OAAQ,IAEV,EAAKC,UAAYC,IAAMC,YACvB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBATL,E,wDAYPE,GACVC,KAAKP,UAAUQ,U,mCAGJC,GACXF,KAAKG,SAAS,CACZb,KAAMY,EAAME,OAAOC,MAAM,GACzBC,OAAQ,M,iCAIDlB,GAET,MADkC,KAAlBA,EAAMmB,QAEb,uBAAMC,UAAU,gBAAhB,wBAA4CpB,EAAMmB,WAEpD,0B,qCAGML,GACb,IAAMO,EAAO,IAAIC,SACjBD,EAAKE,OAAO,OAAQX,KAAKX,MAAMC,MAC/BsB,IACGC,KAAK,aAAcJ,EAAM,CACxBK,QAAS,CACP,eAAgB,yBAGnBC,MAAK,SAACC,GAELC,QAAQC,IAAIF,EAAIG,iB,uCAIL/B,GACf,MAAqB,IAAjBA,EAAMmB,QAEN,cAACa,EAAA,EAAD,CAAQZ,UAAU,aAAaa,QAAQ,YAAvC,wBAOF,cAACD,EAAA,EAAD,CACEZ,UAAU,aACVc,QAAStB,KAAKF,eACduB,QAAQ,UAHV,0B,+BAUM,IAAD,OACP,OACE,qBAAKb,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,oBAAIA,UAAU,SAAd,8BACA,sBAAKA,UAAU,SAAf,UACE,eAACe,EAAA,EAAD,CAAYf,UAAU,SAAtB,UACE,cAACe,EAAA,EAAWC,QAAZ,CAAoBhB,UAAU,YAA9B,SACE,cAACe,EAAA,EAAWE,KAAZ,CAAiBC,GAAG,WAApB,4BAEF,cAACC,EAAA,EAAD,CACEC,YAAY,YACZC,aAAW,YACXC,mBAAiB,gBAGrB,mBAAGtB,UAAU,KAAb,gBACA,uBACEuB,KAAK,OACLL,GAAG,OACHM,IAAK,SAACC,GAAD,OAAQ,EAAKxC,UAAYwC,GAC9BC,MAAO,CAAEC,QAAS,QAClBC,SAAUpC,KAAKqC,aAAaxC,KAAKG,QAEnC,cAACoB,EAAA,EAAD,CACEE,QAAStB,KAAKJ,YACdY,UAAU,SACVa,QAAQ,YAHV,uCAMU,IACV,mBAAMiB,WAAN,CAAiB/B,QAASP,KAAKX,MAAME,UAEvC,cAAC6B,EAAA,EAAD,CACEZ,UAAU,aACVc,QAAStB,KAAKF,eACduB,QAAQ,UAHV,iC,GApGQkB,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6eceefdc.chunk.js","sourcesContent":["import \"./App.css\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: null,\n      name: \"\",\n      bucket: \"\",\n    };\n    this.uploadRef = React.createRef();\n    this.handleClick = this.handleClick.bind(this);\n    this.transcribeFile = this.transcribeFile.bind(this);\n  }\n\n  handleClick(e) {\n    this.uploadRef.click();\n  }\n\n  onChangeFile(event) {\n    this.setState({\n      file: event.target.files[0],\n      loaded: 0,\n    });\n  }\n\n  RenderFile(props) {\n    const hasFile = props.hasFile !== \"\";\n    if (hasFile) {\n      return <span className=\"uploaded-file\">uploaded : {props.hasFile}</span>;\n    }\n    return <div></div>;\n  }\n\n  transcribeFile(event) {\n    const data = new FormData();\n    data.append(\"file\", this.state.file);\n    axios\n      .post(\"/mp4upload\", data, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      })\n      .then((res) => {\n        // then print response status\n        console.log(res.statusText);\n      });\n  }\n\n  RenderTranscribe(props) {\n    if (props.hasFile == \"\") {\n      return (\n        <Button className=\"transcribe\" variant=\"secondary\">\n          Transcribe\n        </Button>\n      );\n    }\n\n    return (\n      <Button\n        className=\"transcribe\"\n        onClick={this.transcribeFile}\n        variant=\"success\"\n      >\n        Transcribe\n      </Button>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"zander\">Zoom Transcriber</h1>\n          <div className=\"inputs\">\n            <InputGroup className=\"z-link\">\n              <InputGroup.Prepend className=\"prepender\">\n                <InputGroup.Text id=\"linktext\">ðŸ”—</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                placeholder=\"Zoom Link\"\n                aria-label=\"Zoom Link\"\n                aria-describedby=\"linktext\"\n              />\n            </InputGroup>\n            <p className=\"or\">or</p>\n            <input\n              type=\"file\"\n              id=\"file\"\n              ref={(r) => (this.uploadRef = r)}\n              style={{ display: \"none\" }}\n              onChange={this.onChangeFile.bind(this)}\n            />\n            <Button\n              onClick={this.handleClick}\n              className=\"upload\"\n              variant=\"secondary\"\n            >\n              Upload .mp4 from Computer\n            </Button>{\" \"}\n            <this.RenderFile hasFile={this.state.name} />\n          </div>\n          <Button\n            className=\"transcribe\"\n            onClick={this.transcribeFile}\n            variant=\"success\"\n          >\n            Transcribe\n          </Button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}